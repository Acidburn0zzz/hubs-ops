#!/usr/bin/env node

// This script handles the !INCLUDE_JS macro in the specified template and
const util = require('util');
const exec = util.promisify(require('child_process').exec);
const spawn = require('child_process').spawn;
const { writeFile, unlinkSync } = require('fs');

if (process.argv.length !== 6) {
  console.log("Usage: deploy <template.yaml> <stack-name> <region> <js-source-path>")
  console.log("")
  console.log("Generates and deploys the given yaml based template to CloudFormation.")
  console.log("In the template, use !INCLUDE_JS to have this script minify + inject JS into the template as a string value (for lambdas). This script will also verify you do not exceed the 4096 limit.")
  console.log("")
  console.log("Prerequisites:")
  console.log("- AWS CLI (pip3 install awscli)")
  console.log("- cfn-flip (pip install cfn_flip)")
  console.log("- minify (npm install -g babel-minify)")
  process.exit();
}

const inFile = process.argv[2];
const stackName = process.argv[3];
const region = process.argv[4];
const jsSourcePath = process.argv[5];

async function getParsedTemplate(inFile) {
  const {stdout, stderr} = await exec(`cfn-flip -j ${inFile} -`)
  return JSON.parse(stdout);
}

const minifiedJSOfFile = async (f) => {
  const {stdout, stderr} = await exec(`minify ${jsSourcePath}/${f}`)

  if (stdout.length > 4096) {
    console.log(`Failed inlining ${f}, minifed JS is too large (${stdout.length} bytes)`);
    process.exit(1);
  }
  return stdout;
};

const walk = async (n) => {
  for (let [ k, v ] of Object.entries(n)) {
    if (typeof(v) === "string" && v.startsWith("!INCLUDE_JS")) {
      n[k] = await minifiedJSOfFile(v.substring("!INCLUDE_JS".length + 1).trim());
    }

    if (typeof(v) === "object") {
      await walk(v);
    }
  }
};

const runDeploy = () => {
  return new Promise(resolve => {
    const deploy = spawn('aws', ['cloudformation', 'deploy', '--stack-name', stackName, '--region', region, '--template-file', '_template.json', '--capabilities', 'CAPABILITY_IAM']);

    deploy.stdout.on('data', (d) => console.log(d.toString()));
    deploy.stderr.on('data', (d) => console.log(d.toString()));
    deploy.stderr.on('exit', () => resolve());
  });
};

getParsedTemplate(inFile).then(async template => {
  await walk(template);

  writeFile("_template.json", JSON.stringify(template), async () => {
    await runDeploy();
    unlinkSync("_template.json");
  });
})
