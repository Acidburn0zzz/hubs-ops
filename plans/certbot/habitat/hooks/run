#!{{pkgPathFor "core/bash"}}/bin/bash
exec 2>&1

service_group() {
  pkg_ident=$1
  hab svc status \
    | grep ${pkg_ident} \
    | grep -v "^package" \
    | awk '{print $7}'
  return $?
}

begin_ip_filtering() {
{{#if cfg.general.standalone_port }}
  iptables -t nat -I PREROUTING 1 -p tcp --dport 80 -j REDIRECT --to-port {{ cfg.general.standalone_port }}
{{/if}}
}

end_ip_filtering() {
{{#if cfg.general.standalone_port }}
  iptables -t nat -D PREROUTING -p tcp --dport 80 -j REDIRECT --to-port {{ cfg.general.standalone_port }}
{{/if}}
}

get_certificates() {
  # shellcheck disable=SC2154
  echo "$(date) Getting any needed LetsEncrypt certificates for '{{cfg.general.domain}}'"
  begin_ip_filtering();
  certbot certonly \
    --{{cfg.general.plugin}} \
{{#if cfg.general.standalone_port }}
    --http-01-port {{ cfg.general.standalone_port }} \
{{/if}}
    --standalone-supported-challenges http-01 \
    --config='{{pkg.svc_config_path}}/certbot.ini' \
    --noninteractive
  end_ip_filtering();
  return $?
}

renew_certificates() {
  echo "$(date) Renewing LetsEncrypt certificates if neccessary"
  begin_ip_filtering();
  certbot renew \
    --{{cfg.general.plugin}} \
    --config='{{pkg.svc_config_path}}/certbot.ini'
  end_ip_filtering();
  return $?
}

contains_pem() {
  local pem=$1
  local domain=$2
  grep '\-\-\-\-\-BEGIN ' "$pem" &> '/dev/null' \
    && grep '\-\-\-\-\-END ' "$pem" &> '/dev/null'
  return $?
}

if [[ "{{ cfg.general.domain }}" == "" ]] ; then
  echo "No domain configured for certbot."
  sleep 99999999999
fi

get_certificates

while true
do
  renew_certificates
  sleep {{cfg.general.renewal_interval}}
done
